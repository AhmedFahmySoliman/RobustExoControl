function [H_I, Cor, G_O, C_C] = Modified_NE(parent,pitch,Tree,I,n, child, Xfb, q, dq, q_fb,dq_fb,ddq_fb)

grav = [0;0;0;0;0;9.806];

[J_fb, dJ_fb] = FB_Param(q_fb,dq_fb);   %Floating Base orientation Jacobian and Jacobian dervative w.r.t Global frame

vfb  = Xfb*(J_fb*dq_fb);
afb = Xfb*grav;
ab  = J_fb*ddq_fb + dJ_fb*dq_fb;

L = 0;       % Leg index
NBR        = n-6;

for i = 1:NBR
    [XJ, S(:,i)] = jcalc(pitch(i+6),q(i));
    vJ           = S(:,i)*dq(i);
    Xup(:,:,i)   = XJ*Tree(:,:,i+6);
   
    if parent(i)==0
        X(:,:,i) = Xup(:,:,i);
    else
        X(:,:,i) = Xup(:,:,i)*X(:,:,parent(i));
    end
       
    if parent(i) == 0
        v(:,i) =  Xup(:,:,i)*Xfb*(J_fb*dq_fb) + S(:,i)*dq(i);
        a(:,i) =  Xup(:,:,i)*afb;
        g(:,i) = a(:,i);
        L = L+1;
       
        if L == 1
        K1((1:6)+(L-1)*6,1:i+6) =  [Xup(:,:,i)*Xfb*J_fb S(:,i)];
        else
        K1((1:6)+(L-1)*6,1:i+6) =  [Xup(:,:,i)*Xfb*J_fb zeros(6,4) S(:,i)];    
        end
       
        K2  = zeros(6,8);
        c(:,i) = zeros(6,1);
       
    else
       
        if L == 1
        K1((1:6)+(L-1)*6,1:i+6) =  [Xup(:,:,i)*K1((1:6)+(L-1)*6,1:parent(i)+6) S(:,i)];
        else
        K1((1:6)+(L-1)*6,1:i+6) =  [Xup(:,:,i)*K1((1:6)+(L-1)*6,1:parent(i)+6) S(:,i)];
        end
       
        v(:,i) =  Xup(:,:,i)*v(:,parent(i)) + S(:,i)*dq(i);                      
        a(:,i) =  Xup(:,:,i)*a(:,parent(i)) + crm(v(:,i))*vJ;
       
        g(:,i)   =  Xup(:,:,i)*g(:,parent(i));
        K2(:,1:i) =  [Xup(:,:,i)*K2(:,1:parent(i)) crm(v(:,i))*S(:,i)];
        c(:,i)   =  K2(:,1:i)*dq(1:i);
    end
        IC(:,:,i) = I(:,:,i+6);
        f(:,i) = IC(:,:,i)*a(:,i) + crf(v(:,i))*IC(:,:,i)*v(:,i);
       
        fg(:,i) = IC(:,:,i)*g(:,i);
        K3(:,1:i+6,i) = [crf(v(:,i))*IC(:,:,i)*K1((1:6)+(L-1)*6,1:6), (IC(:,:,i)*K2(:,1:i) + crf(v(:,i))*IC(:,:,i)*K1((1:6)+(L-1)*6,7:i+6))];
        fc(:,i)       = K3(:,1:i+6,i)*[dq_fb;dq(1:i)];
       
end
Ifb  = I(:,:,6);
ffb  = Ifb*afb + crf(vfb)*Ifb*vfb;

ffbg  = Ifb*afb;
ffbc  = (crf(vfb)*Ifb*Xfb*J_fb)*dq_fb;

L = 0;       % Leg index

for i = NBR:-1:1
  if parent(i) == 0
      L = L+1;
     
            if L == 1
            K_b = [(crf(vfb)*Ifb*Xfb*J_fb) zeros(6,8)]+Xup(:,:,i)'*K4(:,:,i);
            ffbc  = K_b*[dq_fb;dq];
            i_b(L)=i;
            else
            K_b   = K_b + Xup(:,:,i)'*K4(:,:,i);    
            ffbc  = K_b*[dq_fb;dq];
            end
     
      Ifb   = Ifb + Xup(:,:,i)'*IC(:,:,i)*Xup(:,:,i);
      ffb   = ffb + Xup(:,:,i)'*f(:,i);
      ffbg  = ffbg + Xup(:,:,i)'*fg(:,i);
           
  else
      IC(:,:,parent(i)) = IC(:,:,parent(i)) + Xup(:,:,i)'*IC(:,:,i)*Xup(:,:,i);
      f(:,parent(i))    = f(:,parent(i))  + Xup(:,:,i)'*f(:,i);
      fg(:,parent(i))   = fg(:,parent(i)) + Xup(:,:,i)'*fg(:,i);
     
      if child(i) == 0
      K4(:,:,parent(i)) = (K3(:,:,parent(i)) + Xup(:,:,i)'*K3(:,:,i));
      K4(:,:,i)         =  K3(:,:,i);
      else
      K4(:,:,parent(i)) = K3(:,:,parent(i)) + Xup(:,:,i)'*K4(:,:,i);
      end  
      fc(:,parent(i))   = K4(:,:,parent(i))*[dq_fb;dq];
  end
end

for i = NBR:-1:1
   if child(i) == 0
    XX(:,:,i) = eye(6,6);
   else
    XX(:,:,i) = Xup(:,:,child(i))'*XX(:,:,child(i));
   end
end

for i = 1:4
        Jr(i+6,:)= S(:,i)'*XX(:,:,i);      % Right foot Jacobian Transpose
end
for i = 5:8
        Jl(i+6,:)= S(:,i)'*XX(:,:,i);      % Left foot Jacobian Transpose
end

afb  = Xfb*ab;

Jr(1:6,:) = X(:,:,4)';
Jl(1:6,:) = X(:,:,8)';

for i = 1:NBR
%    if  parent(i) == 0
%        a(:,i)  = Xup(:,:,i)*afb;
%    else
%        a(:,i)  = Xup(:,:,i)*a(:,parent(i));
%    end
   C(i,1)  = S(:,i)' * f(:,i);
   C_M(i,:)  = S(:,i)' * K4(:,:,i);
   Cc(i,1) = C_M(i,:)*[dq_fb;dq];
   G(i,1)  = S(:,i)' * fg(:,i);
end

%% Inertia Matrix

for i = 1:NBR
  fh = IC(:,:,i) * S(:,i);
  F1(:,i) = X(:,:,i)'*fh;
  H(i,i) = S(:,i)' * fh;
  j = i;
  while parent(j) > 0
    fh = Xup(:,:,j)' * fh;
    j = parent(j);
    H(i,j) = S(:,i)' * fh;
    H(j,i) = H(i,j);
  end
end

%% Model Parameters
H_I    = [Ifb, F1; F1', H];
Cor    = [K_b; C_M];
G_O    = [ffbg; G(:,1)];
C_C    = [ffb; C(:,1)];

end